syntax = "proto3";

package pb;


message Empty{
}

// Represent a void message indicating success
message Success {
    string s = 1;
}

// Represents an error.
message Error {
    string msg = 1;
}

message Transaction {
    int64 id = 1;
    string v = 2;
}

// A single Block on a Blockchain
message Block {
    int64 id = 1;
    string timestamp = 2;
    string prevHash = 3;
    string hash = 4;
    repeated Transaction tx = 5;
    string seed = 6;
}

// Input to AppendBlock
message AppendBlockArgs {
    string peer = 1;
    repeated Block blockchain = 2;
}

message AppendBlockRet {
    bool success = 1;
}

message AppendTransactionArgs {
    string peer = 1;
    Transaction tx = 2;
}

message AppendTransactionRet {
    bool success = 1;
}

message ProposeBlockArgs {
    string peer = 1;
    int64 round = 2;
    int64 period = 3;
    string flag = 4;
    int64 credence = 5;
    bytes q = 6;
    bytes nextQ = 7;
    string hashOfLastBlock = 8;
    string hashOfCurrentBlock = 9;
    Block block = 10;
    SIGRet signature = 11;
}

message ProposeBlockRet {
    bool success = 1;
}

message VoteArgs {
    string peer = 1;
    string value = 2;
    int64 round = 3;
    int64 period = 4;
    string voteType = 5;
    SIGRet signature = 6;

    //step
    int64 step = 7;
}

message VoteRet {
    bool success = 1;
}

message SIGRet {
    string userId = 1;
    bytes signedMessage = 2;
}

message RequestBlockChainArgs {
    string peer = 1;
}

message RequestBlockChainRet {
    string peer = 1;
    repeated Block blockchain = 2;
    bytes q = 3;
}

message NoticeFinalBlockValueArgs {
    string peer = 1;
    string value = 2;
}

message NoticeFinalBlockValueRet {
    bool success = 1;
}

// Algorand service
service Algorand {
    rpc AppendBlock(AppendBlockArgs) returns (AppendBlockRet) {}
    rpc AppendTransaction(AppendTransactionArgs) returns (AppendTransactionRet) {}
    rpc ProposeBlock(ProposeBlockArgs) returns (ProposeBlockRet) {}
    rpc Vote(VoteArgs) returns (VoteRet) {}
    rpc RequestBlockChain(RequestBlockChainArgs) returns (RequestBlockChainRet) {}
    rpc NoticeFinalBlockValue(NoticeFinalBlockValueArgs) returns (NoticeFinalBlockValueRet) {}
}

message Blockchain {
    repeated Block blocks = 1;
}

message Result {
    oneof result {
        Blockchain bc = 1;
        Success s = 2;
    }
}

enum Op {
    GET = 0;
    SEND = 1;
}

// A type for arguments across all operations
message Command {
    Op operation = 1;
    oneof arg {
        Empty empty = 2;
        Transaction tx = 3;
    }
}

// Client service to add to blockchain
service BCStore {
    rpc Get (Empty) returns (Result) {}
    rpc Send (Transaction) returns (Result) {}
}

message Response {
    string Success = 1;
}

message RPState {
    repeated string Message = 1;//round period
}

message SLState {
    repeated string Message = 1;//step leader
}

service Probe {
    rpc SendRPState (RPState) returns (Response) {}
    rpc SendSLState (SLState) returns (Response) {}
    rpc SendBlockChain (Blockchain) returns (Response) {}
}

